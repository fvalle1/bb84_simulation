#include "Phone.h"

ClassImp(Phone)

Phone::Phone() {
    if(Qbit::DEBUG) printf("\nCreating Phone by default\n");
    fQbitA = new Qbit();
}

Phone::Phone(const Phone& phone){
    if(Qbit::DEBUG) printf("\nCopying Phone\n");

    if(phone.fQbitA){
        fQbitA = new Qbit(*phone.fQbitA);
    }else{
        fQbitA = new Qbit();
    }

}

//destructor
Phone::~Phone()
{
    if(Qbit::DEBUG) printf("\nDestroying Phone\n");
    delete fQbitA;
}

void Phone::InitResults(fStructToSave &data){
    data.Ntot = 0;
    data.SameBasisNoIntercept = 0;
    data.SameBasisIntercept = 0;
}


//SetNewQbit
void Phone::SetNewQbit(Qbit *qbitA)
{
    //saving qbitA generated by Alice
    delete fQbitA;
    fQbitA = new Qbit(*qbitA);
}

bool Phone::MakeCallClassicalChannel(Qbit *qbit, fStructToSave &data) {
    bool wasSameBasis = false;
//saving qbitB generated by Bob
    //checking if qbitA == qbitB, if baseA == baseB ecc...
    if(fQbitA) {
        data.Ntot++;
        if(fQbitA->GetBase() == qbit->GetBase()) {
            wasSameBasis = true;
            if (*fQbitA == *qbit) {
                data.SameBasisNoIntercept++;
            } else {
                data.SameBasisIntercept++;
            }
        }
    }else{
        std::cerr<<"null pointer on qbit inside phone!"<<std::endl;
    }
    if(Qbit::DEBUG) {
        printf("\n\n**********\nMaking phone call..\n");
        std::cout << "qbitA: " << *fQbitA << std::endl;
        std::cout << "qbitB: " << *qbit << std::endl;
        std::cout << "N: " << data.Ntot << std::endl;
        std::cout << "No intercetp: " << data.SameBasisNoIntercept << std::endl;
        std::cout << "Intercept: " << data.SameBasisIntercept << std::endl;
    }

    return wasSameBasis;
}