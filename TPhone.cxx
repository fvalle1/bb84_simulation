#include <TObject.h>
#include <TTree.h>
#include "TPhone.h"
#include "TQbit.h"

ClassImp(TPhone)

TPhone::TPhone() : TTree() {
    if(TQbit::DEBUG) printf("Creating Phone by default\n");
    fQbitA = new TQbit();

    InitResults();

    this->Branch("SentQbits", &fResult.Ntot, "Ntot/I:SameBasisIntercept:SameBasisNoIntercept");
}

//constructor
TPhone::TPhone(const char *name) : TTree(name, "ClassicalChannelPhone")
{
    if(TQbit::DEBUG) printf("\nCreating Phone with name\n");
    fQbitA = new TQbit();

    InitResults();

    this->Branch("SentQbits", &fResult.Ntot, "Ntot/I:SameBasisIntercept:SameBasisNoIntercept");
}

TPhone::TPhone(const TPhone& phone): fResult(phone.fResult){
    if(TQbit::DEBUG) printf("\nCopying Phone\n");

    if(phone.fQbitA){
        fQbitA = new TQbit(*phone.fQbitA);
    }else{
        fQbitA = new TQbit();
    }

    this->Branch("SentQbits", &fResult.Ntot, "Ntot/I:SameBasisIntercept:SameBasisNoIntercept");

}


void TPhone::InitResults() {
    if(TQbit::DEBUG) printf("\nInit phone results\n");
    fResult.Ntot = 0;
    fResult.SameBasisIntercept = 0;
    fResult.SameBasisNoIntercept = 0;
}

//destructor
TPhone::~TPhone()
{
    if(TQbit::DEBUG) printf("Destroying Phone\n");
    delete fQbitA;
}

//SetNewQbit
void TPhone::SetNewQbit(TQbit *qbitA)
{
    //saving qbitA generated by Alice
    fQbitA = new TQbit(*qbitA);
}

//AddPoint
void TPhone::AddPoint()
{
    this->Fill();
}

void TPhone::Update(TQbit *qbit) {
//saving qbitB generated by Bob
    //checking if qbitA == qbitB, if baseA == baseB ecc...
    if(fQbitA) {
        fResult.Ntot++;
            if (*qbit == *fQbitA) {
                fResult.SameBasisNoIntercept++;
            } else {
                fResult.SameBasisIntercept++;
            }
    }else{
        std::cerr<<"null pointer on qbit inside phone!"<<std::endl;
        return;
    }

}

TBranch *TPhone::GetBranch() {
    return this->TTree::GetBranch("SentQbits");
}
